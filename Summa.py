import math
from typing import List

class Solution:
    def solveSudoku(self, board: List[List[str]],n:int) -> None:
        m=int(math.sqrt(n))
        rows = [set() for _ in range(n)]
        cols = [set() for _ in range(n)]
        boxes = [set() for _ in range(n)]
        empties = []

        for r in range(n):
            for c in range(n):
                if board[r][c] == '.':
                    empties.append((r, c))
                else:
                    val = board[r][c]
                    rows[r].add(val)
                    cols[c].add(val)
                    boxes[(r//m)*m + (c//m)].add(val)

        def backtrack(idx=0):
            if idx == len(empties):
                return True
            r, c = empties[idx]
            b = (r//m)*m + (c//m)
            for num in range(1,n+1):
                if num not in rows[r] and num not in cols[c] and num not in boxes[b]:
                    board[r][c] = num
                    rows[r].add(num)
                    cols[c].add(num)
                    boxes[b].add(num)

                    if backtrack(idx + 1):
                        return True

                    board[r][c] = '.'
                    rows[r].remove(num)
                    cols[c].remove(num)
                    boxes[b].remove(num)
            return False

        backtrack()

board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]

# board =[
# ["5",".",".",".",".",".",".",".","7",".",".",".",".",".",".","."],
# [".",".",".","2",".",".",".",".",".","9",".",".",".",".",".","."],
# [".",".","8",".",".","7",".",".",".",".",".","6",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","3"],
# [".",".",".",".","3",".",".",".",".",".",".",".",".","12",".","."],
# [".","11",".",".",".",".","5",".",".",".",".",".",".",".","13","."],
# [".",".",".",".",".",".",".","8",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
# [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."]
# ]

n=len(board)
Solution().solveSudoku(board,n)

for row in board:
    print(row)
